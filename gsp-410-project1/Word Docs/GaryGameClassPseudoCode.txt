class Game

messObj

data members
{
	game num
	stats
	U/i number
	model number
	gameInfo
}


recieveMess(messObj)
{
	if check4Errors(messObj) = true
	{
	  handleError(messObj)
	}
	else
	{	
          updategame(messObj)
	}
		
}


updategame(messObj)
{
 	//take messObj that should be by now 100% sure its for game logic only
	//make changes in game logic based on for example(messObj.gameInfo())

	messObj newGameInfo = calculations(messObj.gameInfo())

	buildUpdateMess(newGameInfo)
	
}

handleError(messObj)
{
	newMessObj  = createErrorMess(messObj)
	sendMess(newMessObj)
}

buildUpdateMess(messObj)
{
	//somehow take current game data and put into messObj
	sendMess(messObj)
}


//see if it has errors such as sent to wrong place, empty ect....
bool check4Errors(messObj)
{
 	//someHow check if message is legit
	//return true or false
	 
}

messObj createErrorMess(messObj)
{
	//somehow take current error data and put into messObj
	return NewMessObj
}

messObj calculations(messObj.gameInfo())
{
	messObj = last.gameInfo + messObj.gameInfo()

	return messObj
	
}

sendMess(messObj)
{

	// hand over messObj to commObj
}